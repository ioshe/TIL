1. Airflow를 선택하는 이유
    - 파이썬 코드를 이용해 파이프라인을 구현할 수 있기 때문에 파이썬 언어에서 구현할 수 있는 대부분의 방법을 사용하여 복잡한 커스텀 파이프라인을 만들 수 있다.
    - 파이썬 기반의 Airflow는 쉽게 확장 가능하고 다양한 시스템과 통합이 가능하다.
    - 스케줄링 기법으로 파이프라인을 정기적으로 실행하고 점진적(incremental)처리를 통해 전체 파이프라인을 재실행할 필요 없는 효율적인 파이프라인을 구축할 수 있다.
    - 백필 기능을 사용하면 과거데이터를 손쉽게 재처리할 수 있기 때문에 코드를 변경한 후 재성성이 필요한 데이터 재처리가 가능하다.
    - Airflow의 웹 인터페이스는 파이프라인 실행 결과를 모니터링 할 수 있고 오류를 디버깅하기 위한 편리한 뷰를 제공한다.
2. Airflow가 적합하지 않은 경우
    - Airflow 는 반복적이거나 배치 태스크를 실행하는 기능에 초점이 맞춰져 있기 때문에, 스트리밍 워크플로 및 해당 파이프라인 처리에 적합하지 않을 수 있다.
    - 추가 및 삭제 태스크가 빈번한 동적 파이프라인의 경우에는 적합하지 않을 수 있다. Airflow 는 동적 태스크를 구현할 수 있지만, 웹 인터페이스는 DAG의 가장 최근 실행 버전에 대한 정의만 표현하기 때문에 Airflow는 실행되는 동안 구조가 변경되지 않는 파이프라인에 더 적합하다.